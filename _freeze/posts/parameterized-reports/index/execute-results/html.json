{
  "hash": "2c0b6156142209c8cabcaa7999a7b8c4",
  "result": {
    "markdown": "---\ntitle: \"Using {foreach} to Speed up Parameterized RMarkdown PDF Report\"\nauthor: \"Matt Roumaya\"\ndate: \"2021-07-09\"\ncategories: [R, reporting, RMarkdown, Microsoft Access]\n---\n\n\n\n\nRecently, I have been working on a project to find alternate methods for creating PDF score reports for assessments that have typically been made using Microsoft Access. As someone who has literally never had a fun time working in Access, I was thrilled to be assigned to this project, and was then quickly humbled by the task at hand.\n\n![](ms-access.jpg){fig-align=\"center\"}\n\nIt has been easy enough to create parameterized HTML reports for a handful of internal users, but when the audience is external at a scale of thousands of reports, the processing time in generating the reports quickly becomes a major consideration in operationalizing the solution.\n\nAfter tweaking code, unsuccessfully experimenting with `cache = TRUE`, and several cups of coffee ☕, I finally found a reasonable solution using the [`foreach`](https://cran.r-project.org/web/packages/foreach/vignettes/foreach.html \"foreach\") and [`doParallel`](https://cran.r-project.org/web/packages/doParallel/doParallel.pdf) packages as suggested by a colleague, in reference to an email from 2018 from a different organization dealing with the same exact dilemma.\n\nThe first thing I learned that really helped understand why my PDF reports were being compiled so slowly is that [R is single threaded by default.](https://subscription.packtpub.com/book/application_development/9781783989263/1/ch01lvl1sec10/r-is-single-threaded) This is a new concept to me so I'm not going to even pretend to fully understand it, but I found [this](https://nceas.github.io/oss-lessons/parallel-computing-in-r/parallel-computing-in-r.html) resource to be super helpful.\n\nFor this quick demo, we will need to make an `RMarkdown` file and an `R` file.\n\n## RMarkdown File: Report-Layout.rmd\n\nThe `RMarkdown` file could look something like this:\n\n```` markdown\n---\ntitle: \"Iris Demo\"\noutput: pdf_document\nparams: \n  species: \"\"\n---\n\n```{r}\nknitr::opts_chunk$set(\n    echo = FALSE,\n    message = FALSE,\n    warning = FALSE\n)\n\nlibrary(tidyverse)\n\ndf <- iris %>% \n  filter(Species == params$species)\n```\n\nReport for the species: params$species\n\n```{r}\ndf %>% \n  filter(Species == \"setosa\") %>% \n  ggplot(aes(Sepal.Width))+\n  geom_histogram() +\n  ggtitle(paste0(\"Distribution of Sepal.Length for \", params$species))\n```\n````\n\nThe parameters for `species` will be passed through to generate a report for each species in `iris`.\n\nWhen creating thousands of reports, this process takes quite a while, and luckily we can speed it up using `foreach` and `doParallel`.\n\n## R Script: Create Reports\n\nThe `R` script could look something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(foreach)\nlibrary(doParallel)\n\nspecies_names <- as.character(unique(iris$Species))\n\n\nn_cores <- parallel::detectCores()\ncluster <- parallel::makeCluster(n_cores-1)                 \ndoParallel::registerDoParallel(cluster)\n\nforeach (i = seq_along(species_names), .combine = 'c') %dopar% {\n  system.time(rmarkdown::render(\"Report-Layout.rmd\",\n                    params = list(species = species_names[i]),\n                    output_file = paste0(\"Report for \", species_names[i])))\n}\n```\n:::\n\n\nTo generate reports, all we need to do is run the `Create Reports.r` script, and we'll have three reports generated in a matter of seconds. As we increase the volume of reports, the multi-core processing enabled by `foreach` / `doParallel` will significantly cut down on the processing time.\n\nI had intended for this to be longer but really just want to put this out there, and maybe revisit some day with a Part 2. For now, Molly and me are going to hike around Wissahickon with Donut 🐶 🍩\n\n![Our dog, Donut](donut.jpg){width=\"40%\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}