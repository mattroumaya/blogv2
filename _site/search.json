[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nJdenticon for R\n\n\n\n\n\n\n\nR\n\n\nJavaScript\n\n\nNode.js\n\n\n\n\n\n\n\n\n\n\n\nApr 29, 2023\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nObservable Flying Objects\n\n\n\n\n\n\n\nR\n\n\nObservable\n\n\nJavaScript\n\n\nNUFORC\n\n\nUFO\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2023\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nphillymetaldata R package\n\n\n\n\n\n\n\nR\n\n\nR package\n\n\nmetal\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nA Sort(a) Useful Trick\n\n\n\n\n\n\n\nR\n\n\nsnippet\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2022\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nUsing {foreach} to Speed up Parameterized RMarkdown PDF Report\n\n\n\n\n\n\n\nR\n\n\nreporting\n\n\nRMarkdown\n\n\nMicrosoft Access\n\n\n\n\n\n\n\n\n\n\n\nJul 9, 2021\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\n52 Different Ways to Rename a Column in R\n\n\n\n\n\n\n\nR\n\n\ncats\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2021\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\ndoubleheadR\n\n\n\n\n\n\n\nR\n\n\nsurvey\n\n\nSurveyMonkey\n\n\n\n\n\n\n\n\n\n\n\nJul 25, 2020\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nTidying The Survey Monkey Doubleheader\n\n\n\n\n\n\n\nR\n\n\nsurvey\n\n\nSurveyMonkey\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2020\n\n\nMatt Roumaya\n\n\n\n\n\n\n  \n\n\n\n\nInfinite Rummy in the Age of Quarantine\n\n\n\n\n\n\n\nR\n\n\ndataviz\n\n\ncats\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2020\n\n\nMatt Roumaya\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/nuforc/index.html",
    "href": "posts/nuforc/index.html",
    "title": "Observable Flying Objects",
    "section": "",
    "text": "NUFORC Bot\nNUFORC Bot is/was a Twitter bot that scrapes UFO sightings data from the NUFORC Data Bank and tweets out a summary (and image if one was provided). The bot has ~700 followers and not much engagement, but it has definitely been a fun way to learn about web scraping, bot building, and CRON jobs via GitHub Actions (repo is here).\nRecently, the World‚Äôs Smartest Man pulled the plug on Twitter‚Äôs API access for a wide range of developers, including NUFORC Bot. For some reason, NUFORC Bot is now back up and running, but it seems like it will be short-lived.\nAfter the hostile takeover, I stopped using my personal account on Twitter, deleted the app, and planned to just let NUFORC Bot ride off into the sunset. Now that the sunset is quickly approaching, I‚Äôve been trying to think of a way to reproduce a similar effect to the tweet using the data I have already collected.\nHaving been a subscriber to hrbrmstr‚Äôs Daily Dropfor a while, I‚Äôve seen a ton of amazing Observable notebooks, and thought that this could be a fun project to learn Observable and see . The impending demise of NUFORC Bot was as good an excuse as any to hack together an Observable notebook that can do everything that NUFORC Bot did + MORE üëΩ.\n\nimport { selectRandom, addHeader } from \"@mroumaya/random-ufo\"\n\nufoReport = d3.csv('https://raw.githubusercontent.com/mattroumaya/mufonbot/master/data_raw/links.csv')\n\nselectRandom(ufoReport);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naddHeader(selectRandom(ufoReport))\n\n\n\n\n\n\n\n\n\nhtl.html`&lt;h3 class='header'&gt;&lt;/h3&gt;\n&lt;div class=\"date\"&gt;&lt;/div&gt;\n&lt;div class=\"shape\"&gt;&lt;/div&gt;\n&lt;div class=\"duration\"&gt;&lt;/div&gt;\n&lt;br&gt;\n&lt;a class=\"report-link\"&gt;Link to Report&lt;/a&gt;\n&lt;br&gt;\n&lt;a class=\"raw-link\"&gt;Link to Image&lt;/a&gt;\n&lt;br&gt;\n&lt;br&gt;\n&lt;div class=\"summary\"&gt;&lt;/div&gt;\n&lt;img id=\"ufo-img\" style=\"height: 500px\"&gt;\n&lt;br&gt;`"
  },
  {
    "objectID": "posts/parameterized-reports/index.html",
    "href": "posts/parameterized-reports/index.html",
    "title": "Using {foreach} to Speed up Parameterized RMarkdown PDF Report",
    "section": "",
    "text": "Recently, I have been working on a project to find alternate methods for creating PDF score reports for assessments that have typically been made using Microsoft Access. As someone who has literally never had a fun time working in Access, I was thrilled to be assigned to this project, and was then quickly humbled by the task at hand.\nIt has been easy enough to create parameterized HTML reports for a handful of internal users, but when the audience is external at a scale of thousands of reports, the processing time in generating the reports quickly becomes a major consideration in operationalizing the solution.\nAfter tweaking code, unsuccessfully experimenting with cache = TRUE, and several cups of coffee ‚òï, I finally found a reasonable solution using the foreach and doParallel packages as suggested by a colleague, in reference to an email from 2018 from a different organization dealing with the same exact dilemma.\nThe first thing I learned that really helped understand why my PDF reports were being compiled so slowly is that R is single threaded by default. This is a new concept to me so I‚Äôm not going to even pretend to fully understand it, but I found this resource to be super helpful.\nFor this quick demo, we will need to make an RMarkdown file and an R file."
  },
  {
    "objectID": "posts/parameterized-reports/index.html#rmarkdown-file-report-layout.rmd",
    "href": "posts/parameterized-reports/index.html#rmarkdown-file-report-layout.rmd",
    "title": "Using {foreach} to Speed up Parameterized RMarkdown PDF Report",
    "section": "RMarkdown File: Report-Layout.rmd",
    "text": "RMarkdown File: Report-Layout.rmd\nThe RMarkdown file could look something like this:\n---\ntitle: \"Iris Demo\"\noutput: pdf_document\nparams: \n  species: \"\"\n---\n\n```{r}\nknitr::opts_chunk$set(\n    echo = FALSE,\n    message = FALSE,\n    warning = FALSE\n)\n\nlibrary(tidyverse)\n\ndf &lt;- iris %&gt;% \n  filter(Species == params$species)\n```\n\nReport for the species: params$species\n\n```{r}\ndf %&gt;% \n  filter(Species == \"setosa\") %&gt;% \n  ggplot(aes(Sepal.Width))+\n  geom_histogram() +\n  ggtitle(paste0(\"Distribution of Sepal.Length for \", params$species))\n```\nThe parameters for species will be passed through to generate a report for each species in iris.\nWhen creating thousands of reports, this process takes quite a while, and luckily we can speed it up using foreach and doParallel."
  },
  {
    "objectID": "posts/parameterized-reports/index.html#r-script-create-reports",
    "href": "posts/parameterized-reports/index.html#r-script-create-reports",
    "title": "Using {foreach} to Speed up Parameterized RMarkdown PDF Report",
    "section": "R Script: Create Reports",
    "text": "R Script: Create Reports\nThe R script could look something like this:\n\nlibrary(tidyverse)\nlibrary(foreach)\nlibrary(doParallel)\n\nspecies_names &lt;- as.character(unique(iris$Species))\n\n\nn_cores &lt;- parallel::detectCores()\ncluster &lt;- parallel::makeCluster(n_cores-1)                 \ndoParallel::registerDoParallel(cluster)\n\nforeach (i = seq_along(species_names), .combine = 'c') %dopar% {\n  system.time(rmarkdown::render(\"Report-Layout.rmd\",\n                    params = list(species = species_names[i]),\n                    output_file = paste0(\"Report for \", species_names[i])))\n}\n\nTo generate reports, all we need to do is run the Create Reports.r script, and we‚Äôll have three reports generated in a matter of seconds. As we increase the volume of reports, the multi-core processing enabled by foreach / doParallel will significantly cut down on the processing time.\nI had intended for this to be longer but really just want to put this out there, and maybe revisit some day with a Part 2. For now, Molly and me are going to hike around Wissahickon with Donut üê∂ üç©\n\n\n\nOur dog, Donut"
  },
  {
    "objectID": "posts/doubleheadR/index.html",
    "href": "posts/doubleheadR/index.html",
    "title": "doubleheadR",
    "section": "",
    "text": "The past few months of work-life have been constantly busy with survey design and analysis. COVID has really changed the landscape for just about everything, and leaders of projects and departments want and need to implement change quickly, and survey research is helping to inform speedy decision making.\nI‚Äôm here to demo the first R package that I‚Äôve ever written that has been helping me quickly clean and tidy data from SurveyMonkey to prepare for analysis and reporting. This is also a continuation of my previous post about tidying the SurveyMonkey Double Header."
  },
  {
    "objectID": "posts/doubleheadR/index.html#step-1-install-packages",
    "href": "posts/doubleheadR/index.html#step-1-install-packages",
    "title": "doubleheadR",
    "section": "Step 1: install packages",
    "text": "Step 1: install packages\nI‚Äôll assume you are familiar with installing from GitHub, and I‚Äôm working on being more concise.\n\nlibrary(devtools)\ninstall_github('mattroumaya/doubleheadr')"
  },
  {
    "objectID": "posts/doubleheadR/index.html#step-2-check-out-the-demo-file",
    "href": "posts/doubleheadR/index.html#step-2-check-out-the-demo-file",
    "title": "doubleheadR",
    "section": "Step 2: check out the demo file",
    "text": "Step 2: check out the demo file\n\nlibrary(tidyverse)\nlibrary(doubleheadr)\n\ndemo &lt;- doubleheadr::demo\n\ndoubleheadr comes with a built-in demo data set, which helps illustrate the two functions available: clean_headr and trim_headr. The data set demo mimics a .xlsx export from SurveyMonkey and looks like this:\n\n\n\n\n\nRespondent ID\nPlease provide your contact information:\n...3\n...4\n...5\n...6\n...7\n...8\n...9\n...10\n...11\nI wish it would have snowed more this winter.\n\n\n\n\nNA\nName\nCompany\nAddress\nAddress 2\nCity/Town\nState/Province\nZIP/Postal Code\nCountry\nEmail Address\nPhone Number\nResponse\n\n\n11385284375\nBenjamin Franklin\nPoor Richard's\nNA\nNA\nPhiladelphia\nPA\n19104\nNA\nbenjamins@gmail.com\n215-555-4444\nStrongly disagree\n\n\n11385273621\nMae Jemison\nNASA\nNA\nNA\nDecatur\nAlabama\n20104\nNA\nmjemison@nasa.gov\n221-134-4646\nStrongly agree\n\n\n11385258069\nCarl Sagan\nSmithsonian\nNA\nNA\nWashington\nD.C.\n33321\nNA\nstargazer@gmail.com\n999-999-4422\nNeither agree nor disagree\n\n\n\n\n\n\n\nAs analyzers of this data, we will want to paste the column names and values in the first row together. It‚Äôs a bit more complicated than that, which is detailed in my previous post, but we‚Äôre being concise here."
  },
  {
    "objectID": "posts/doubleheadR/index.html#step-3-clean_headr",
    "href": "posts/doubleheadR/index.html#step-3-clean_headr",
    "title": "doubleheadR",
    "section": "Step 3: clean_headr",
    "text": "Step 3: clean_headr\nWe can call clean_headr on our data.frame or tibble object, which takes three arguments:\n* dat: a data.frame object (in this case, inherited from LHS)\n* rep_val: the repeated value as a character string. Our column names have a repeated value of ‚Äò‚Ä¶‚Äô (or ‚Äò..‚Äô, or ‚Äò.‚Äô)\n* clean_names: this is a janitor function that will convert all column names to snake_case and will strip out any non-alphanumeric characters.\n\ndemo %&gt;% \n  clean_headr(rep_val = '...', clean_names = TRUE) %&gt;% \n  colnames()\n\n [1] \"respondent_id\"                                          \n [2] \"please_provide_your_contact_information_name\"           \n [3] \"please_provide_your_contact_information_company\"        \n [4] \"please_provide_your_contact_information_address\"        \n [5] \"please_provide_your_contact_information_address_2\"      \n [6] \"please_provide_your_contact_information_city_town\"      \n [7] \"please_provide_your_contact_information_state_province\" \n [8] \"please_provide_your_contact_information_zip_postal_code\"\n [9] \"please_provide_your_contact_information_country\"        \n[10] \"please_provide_your_contact_information_email_address\"  \n[11] \"please_provide_your_contact_information_phone_number\"   \n[12] \"i_wish_it_would_have_snowed_more_this_winter_response\"  \n\n\nWe can compare this with clean_names = FALSE, which creates column names that are very similar to the actual survey questions that we‚Äôve asked.\n\ndemo %&gt;% \n  clean_headr(rep_val = '...', clean_names = FALSE) %&gt;% \n  colnames()\n\n [1] \"Respondent ID\"                                           \n [2] \"Please provide your contact information: Name\"           \n [3] \"Please provide your contact information: Company\"        \n [4] \"Please provide your contact information: Address\"        \n [5] \"Please provide your contact information: Address 2\"      \n [6] \"Please provide your contact information: City/Town\"      \n [7] \"Please provide your contact information: State/Province\" \n [8] \"Please provide your contact information: ZIP/Postal Code\"\n [9] \"Please provide your contact information: Country\"        \n[10] \"Please provide your contact information: Email Address\"  \n[11] \"Please provide your contact information: Phone Number\"   \n[12] \"I wish it would have snowed more this winter. Response\""
  },
  {
    "objectID": "posts/doubleheadR/index.html#step-4-trim_headr",
    "href": "posts/doubleheadR/index.html#step-4-trim_headr",
    "title": "doubleheadR",
    "section": "Step 4: trim_headr",
    "text": "Step 4: trim_headr\nWhether we use clean_names or not, we will most likely want to shorten some of the column names so that our code is more legible. The demo data here is pretty conservative - if you have a verbose survey question, you can imagine how long your column names could be!\n\ntrim_headr makes it easy to shorten column names, and is really just composed of a concatenated gsub call on all of the column names. Let‚Äôs say we do use clean_names and we want to remove ‚Äúplease_provide_your_contact_‚Äù from our column names, so that we will still be left with shorter, descriptive names like information_name, information_company, etc. Let‚Äôs also shorten our last column name to snowed_more_this_winter.\n\ndemo %&gt;% \n  clean_headr(rep_val = '...') %&gt;% \n  trim_headr(c('please_provide_your_contact_', 'i_wish_it_would_have_', '_response')) %&gt;% \n  colnames()\n\n [1] \"respondent_id\"               \"information_name\"           \n [3] \"information_company\"         \"information_address\"        \n [5] \"information_address_2\"       \"information_city_town\"      \n [7] \"information_state_province\"  \"information_zip_postal_code\"\n [9] \"information_country\"         \"information_email_address\"  \n[11] \"information_phone_number\"    \"snowed_more_this_winter\"    \n\n\nEasy! Depending on the number of survey questions, getting to this point could take a really long time by first manually renaming columns and then deleting the first row. I‚Äôve found this workflow to be more intuitive, and leaves me more time to focus on the data and creating effective dashboards and reports.\nIf you happen to try out doubleheadr and find it helpful, or more likely, find some bugs or inefficiencies, I would love to hear about it!"
  },
  {
    "objectID": "posts/sorta/index.html",
    "href": "posts/sorta/index.html",
    "title": "A Sort(a) Useful Trick",
    "section": "",
    "text": "My blog is depressingly stagnant and I want to make more of an effort to just post things without putting too much thought into it.\nFor that reason, this post will be extremely brief, and will just show a useful trick that uses dput(), which was unfamiliar to me until I started looking for ways to contribute to the R tag on stackoverflow.\nHere‚Äôs the sort(a)-scenario:\nLet‚Äôs say you have a vector that‚Äôs built into your code that you‚Äôd like to sort. I‚Äôve been stuck on an idea for a blog post about Saves the Day, and have a vector that contains body parts.\n\nparts &lt;- c(\"neck\", \"collarbone\", \"ankle\", \"thigh\", \"eyelid\")\n\nI like order in the world, and want to build this vector alphabetically, which will also make it easier to read as it‚Äôs presented in a blog post.\nInstead of doing your A-B-C‚Äôs and manually rewriting the vector, just use dput()!\n\ndput(sort(parts))\n\nc(\"ankle\", \"collarbone\", \"eyelid\", \"neck\", \"thigh\")\n\n\nEasy!\nNow we can just copy/paste and move on with our lives!\n\nordered_parts &lt;- c(\"ankle\", \"collarbone\", \"eyelid\", \"neck\", \"thigh\")"
  },
  {
    "objectID": "projects/nuforcbot.html",
    "href": "projects/nuforcbot.html",
    "title": "nuforcbot",
    "section": "",
    "text": "Nuforcbot is a Twitter bot that scrapes NUFORC‚Äôs publicly available data and tweets about it. Everything runs off of R and GitHub Actions to automate a tweet every hour. The GitHub repo can be found here."
  },
  {
    "objectID": "projects/phillymetaldata.html",
    "href": "projects/phillymetaldata.html",
    "title": "phillymetaldata R Package",
    "section": "",
    "text": "The {phillymetaldata} R package lets R users download all data for heavy music shows that has ever been listed on phillymetal.net.\nIf your R sessions aren‚Äôt metal enough, look no further. ü§ò\nThis package uses the supabase API to pull data directly from the source, so real-time data is always available."
  },
  {
    "objectID": "projects/phillymetal.html",
    "href": "projects/phillymetal.html",
    "title": "phillymetal.net",
    "section": "",
    "text": "phillymetal.net is a website that lists metal, hardcore, punk, and heavy music shows in the Philadelphia area. Launched in April 2022.\nAs a fan of heavy music and wanting to learn JavaScript, this site is built with mostly vanilla JS, HTML, and CSS, with a backend"
  },
  {
    "objectID": "projects/surveymonkey.html",
    "href": "projects/surveymonkey.html",
    "title": "surveymonkey R Package",
    "section": "",
    "text": "I inherited the surveymonkey R package from Sam Firke (formerly at TNTP) and have maintained the package since 2021. The surveymonkey package lets R users query the SurveyMonkey API directly to bring survey responses into R for quick and easy analysis."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "projects",
    "section": "",
    "text": "nuforcbot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nphillymetal.net\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nphillymetaldata R Package\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsurveymonkey R Package\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "I‚Äôm a Data Solutions Engineer @ Atorus. My goal is to share trivial and occasionally useful R content, learn from and connect with others in the data community, and contribute to open source. I live in Philadelphia with my amazing wife Molly, our two cats, Mango and Phil, and our dog Donut. As a huge fan of heavy music, I also run phillymetal.net, a website that helps people in the Philadelphia area find metal shows ü§ò."
  },
  {
    "objectID": "posts/phillymetal/index.html",
    "href": "posts/phillymetal/index.html",
    "title": "phillymetaldata R package",
    "section": "",
    "text": "In April 2022, I launched phillymetal.net as a way to stay connected to the local music scene that I‚Äôve rarely engaged with since COVID-19 ruined everything.\nWith the immense help of my amazingly talented colleage and R/JavaScript developer Maya Gans, I‚Äôve jumped head first into the world of JavaScript and am totally hooked. In future posts, I‚Äôm planning to write up my experience of learning JavaScript as a (primarily) R user.\nEven though I‚Äôm stoked about JS, I‚Äôm still just as much of an R nerd as ever, and wanted to make all of the data on phillymetal.net freely available whether it‚Äôs in R, a Google Sheet, .csv file, or any other way that could help people in the Philadelphia area find cool shows to go to. So for now, I‚Äôm excited to introduce a one-function R package that makes all of the data super easy to pull.\nIntroducing the {phillymetaldata} package. You can find the repo here!\n\n\n\n\n\n\nInstall {phillymetaldata}\nTo install {phillymetaldata}, run:\n\ndevtools::install_github('mattroumaya/phillymetaldata')\n\n\n\nGet Data\nGetting data is as easy as typing ‚Äúget_data()‚Äù. In fact, that‚Äôs all you need to do:\n\nlibrary(phillymetaldata)\nsuppressMessages(library(tidyverse))\nlibrary(gt)\n\ndata &lt;- phillymetaldata::get_data()\n\nIn the table below, you can see a consolidated view of the data available from get_data(). I removed the unique key/id, whether the entry was validated, and the URL, just to make it a little cleaner to view.\n\ndata %&gt;% \n  head(n = 10) %&gt;% \n  select(-c(id, validated, url)) %&gt;% \n  gt::gt() %&gt;% \n    cols_width(\n    added ~ px(150),\n    show_date ~ px(200),\n    description ~ px(250),\n    venue ~ px(250)\n  )\n\n\n\n\n\n\n\n\nadded\nshow_date\ndescription\nvenue\n\n\n\n\n2022-04-11\n2022-04-09\nJulia's War Fest Day 2\nUkie Club\n\n\n2022-04-11\n2022-04-10\nJulia's War Fest Day 3\nUkie Club\n\n\n2022-04-11\n2022-04-23\nIllusions Of Grandeur // Empress // Sequoia Grove\nDobbs on South\n\n\n2022-04-11\n2022-04-30\nTraitor // Roadkiller // Brazen Hell // Skullovich\nKung Fu Necktie\n\n\n2022-04-11\n2022-04-30\nTestament // Exodus // Death Angel\nStarland Ballroom\n\n\n2022-04-11\n2022-04-30\nCavern Womb // Coagulate // Castrator // Viogression // Mortuous // Scattered Remnants\nWarehouse on Watts\n\n\n2022-04-11\n2022-05-01\nBastard Cross // Night Hag // Soul Devourment // Blood Spore // Ectovoid // Phobophilic // Vastum\nWarehouse on Watts\n\n\n2022-04-11\n2022-05-06\nKnocked Loose // Movements // Kublai Khan // Koyo\nStarland Ballroom\n\n\n2022-04-11\n2022-05-06\nClamfight // Wax Brain // LMI // Endless Teeth // Fright\nCentury\n\n\n2022-04-11\n2022-05-24\nNine Inch Nails\nThe Met\n\n\n\n\n\n\n\n\n\nLooking For a Show?\nIf you happen to be an R user and metalhead/punk/heavy music lover, and also happen to be in the Philadelphia area, you can look for shows to check out by filtering for upcoming shows. (You can also just check out phillymetal.net).\nTo do this, just use the upcoming_shows_only parameter:\n\nget_data(upcoming_shows_only = TRUE) %&gt;% \n  head(n = 10) %&gt;% \n  select(show_date, description, venue) %&gt;% \n  arrange(show_date) %&gt;% \n  gt::gt() %&gt;% \n      cols_width(\n    show_date ~ px(200),\n    description ~ px(400),\n    venue ~ px(250)\n  )\n\n\n\n\n\n\n\n\nshow_date\ndescription\nvenue\n\n\n\n\n2022-10-23\nChat Pile // Orphan Donor // Planning For Burial\nUnderground Arts\n\n\n2022-10-25\nDead Boys // Suzi Moon // Tone Bandits\nKung Fu Necktie\n\n\n2022-10-26\nAsagraum // Cultus Profano // IATT // Blasphemous // Sakrilejist\nThe Fire\n\n\n2022-11-04\nAFI // Drab Majesty\nFranklin Music Hall\n\n\n2022-11-05\nRussian Circles // REZN\nWorld Cafe Live\n\n\n2022-11-06\nOff! // Zulu\nFirst Unitarian Church\n\n\n2022-11-13\nBlack Flag // T.S.O.L. // The Dickies // Total Chaos\nStarland Ballroom\n\n\n2022-11-20\nSaetia // Soul Glo // Massa Nera\nFirst Unitarian Church\n\n\n2022-11-22\nAmon Amarth // Carcass // Obituary // Cattle Decapitation\nThe Fillmore\n\n\n2022-12-05\nBlitzkid\nMilkBoy\n\n\n\n\n\n\n\nThat‚Äôs all I have for now!\nI‚Äôm going to see Chat Pile tomorrow so you should check them out too:"
  },
  {
    "objectID": "posts/observable-flying-objects/index.html",
    "href": "posts/observable-flying-objects/index.html",
    "title": "Observable Flying Objects",
    "section": "",
    "text": "Random UFO Report\ntl;dr - üõ∏ Refresh the page to see a random UFO report! üõ∏\n\nSome fields may show as undefined or null because this is a quick write-up and I‚Äôm busy! :)\nIf you have any suggestions or would like to get started with Observable, or want to connect in general, definitely email me.\n\n\nhtl.html`&lt;h3 class='header'&gt;&lt;/h3&gt;\n \n&lt;div class=\"date\"&gt;&lt;/div&gt;\n\n \n&lt;div class=\"shape\"&gt;&lt;/div&gt;\n\n \n&lt;div class=\"duration\"&gt;&lt;/div&gt;\n\n&lt;br&gt;\n \n&lt;a class=\"report-link\"&gt;Link to Report&lt;/a&gt;\n \n&lt;br&gt;\n \n&lt;a class=\"raw-link\"&gt;Link to Image&lt;/a&gt;\n \n&lt;br&gt;\n \n&lt;br&gt;\n \n&lt;div class=\"summary\"&gt;&lt;/div&gt;\n \n&lt;img id=\"ufo-img\" style=\"height: 500px\"&gt;\n \n&lt;br&gt;`\n\n\n\n\n\n\n\n\nNUFORC Bot\nNUFORC Bot is/was a Twitter bot that scrapes UFO sightings data from the NUFORC Data Bank and tweets out a summary (and image if one was provided). The bot has ~700 followers and not much engagement, but it has definitely been a fun way to learn about web scraping, bot building, and CRON jobs via GitHub Actions (repo is here).\nRecently, the World‚Äôs Smartest Man pulled the plug on Twitter‚Äôs API access for a wide range of developers, including NUFORC Bot. For some reason, NUFORC Bot is now back up and running, but it seems like it will be short-lived.\nAfter the hostile takeover, I stopped using my personal account on Twitter, deleted the app, and planned to just let NUFORC Bot ride off into the sunset. Now that the sunset is quickly approaching, I‚Äôve been trying to think of a way to reproduce a similar effect to the tweet using the data I have already collected.\nHaving been a subscriber to hrbrmstr‚Äôs Daily Drop for a while, I‚Äôve seen a ton of amazing Observable notebooks, and thought that this could be a fun project to learn Observable and see . The impending demise of NUFORC Bot was as good an excuse as any to hack together an Observable notebook that can do everything that NUFORC Bot did + MORE üëΩ.\n\n\nImport From Observable\nIt‚Äôs kind of amazing how little code is needed to create the random report above.\n\nImporting two functions from my Observable Notebook\nReading data with d3. This could also be done in R but is more concise in a single chunk, and I‚Äôm planning to use ojs_define() in a later post.\n\n\nimport { selectRandom, addHeader } from \"@mroumaya/random-ufo\"\n \nufoReport = d3.csv('https://raw.githubusercontent.com/mattroumaya/mufonbot/master/data_raw/links.csv')\n \nufo = addHeader(selectRandom(ufoReport));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe only other code that‚Äôs needed is some HTML to display the NUFORC report data. Observable has a Hypertext Literal implementation that I definitely didn‚Äôt leverage correctly, but looks like this:\n\n\nhtl.html`&lt;h3 class='header'&gt;&lt;/h3&gt;\n \n&lt;div class=\"date\"&gt;&lt;/div&gt;\n\n \n&lt;div class=\"shape\"&gt;&lt;/div&gt;\n\n \n&lt;div class=\"duration\"&gt;&lt;/div&gt;\n\n&lt;br&gt;\n \n&lt;a class=\"report-link\"&gt;Link to Report&lt;/a&gt;\n \n&lt;br&gt;\n \n&lt;a class=\"raw-link\"&gt;Link to Image&lt;/a&gt;\n \n&lt;br&gt;\n \n&lt;br&gt;\n \n&lt;div class=\"summary\"&gt;&lt;/div&gt;\n \n&lt;img id=\"ufo-img\" style=\"height: 500px\"&gt;\n \n&lt;br&gt;`"
  },
  {
    "objectID": "posts/jdenticon/index.html",
    "href": "posts/jdenticon/index.html",
    "title": "Jdenticon for R is on CRAN",
    "section": "",
    "text": "My colleage Andrew and I have been super interested in combining Node.js and R, especially after coming across a compelling use case that helps us to simplify Firebase data fetching. Read on to learn more about:\n\nWhy you might want to combine Node.js and R\nHow you might go about combining Node.js and R\nWhat a Jdenticon/identicon is\nSubmitting a tiny package to CRAN\n\n\n\nRather than designing a multi-step process that would involve running a query in Node.js, and then sending the data to R, Andrew was able to grab the few functions that we needed directly from the firebase npm package.\nThis is huge, because it enables any R user on our team to pull data without knowing any JavaScript at all. The only prerequisite is a Node.js installation that is already setup on our Posit Workbench server.\nEven though we only need to use JavaScript for a few fairly simple queries, there is still quite a bit of a learning curve for anyone who is unfamiliar. Not only is the language different than R, but there are also DevOps considerations like:\n\nInstalling Node.js and using npm to install libraries.\nManaging and securing service account credentials.\nEnsuring maintainability.\nEnabling users to have the ability to customize queries when needed.\n\nWrapping all of this functionality into a few R functions solves all of the issues above. As mentioned, Node.js is available for all users on Workbench. Additionally, secure credentials can be permissioned to users that need them, which is safer and less work for everyone.\nSince the functions are written in R, there is already built-in customization by tweaking parameters as needed. Similarly, an R user is much better equipped to maintain an R package, than needing to maintain a Node.js custom query that is ingested by an R package.\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  },
  {
    "objectID": "posts/jdenticon/index.html#footnotes",
    "href": "posts/jdenticon/index.html#footnotes",
    "title": "Jdenticon for R is on CRAN",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://en.wikipedia.org/wiki/Identicon‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/jdenticon/index.html#why",
    "href": "posts/jdenticon/index.html#why",
    "title": "Jdenticon for R is on CRAN",
    "section": "",
    "text": "Rather than designing a multi-step process that would involve running a query in Node.js, and then sending the data to R, Andrew was able to grab the few functions that we needed directly from the firebase npm package.\nThis is huge, because it enables any R user on our team to pull data without knowing any JavaScript at all. The only prerequisite is a Node.js installation that is already setup on our Posit Workbench server.\nEven though we only need to use JavaScript for a few fairly simple queries, there is still quite a bit of a learning curve for anyone who is unfamiliar. Not only is the language different than R, but there are also DevOps considerations like:\n\nInstalling Node.js and using npm to install libraries.\nManaging and securing service account credentials.\nEnsuring maintainability.\nEnabling users to have the ability to customize queries when needed.\n\nWrapping all of this functionality into a few R functions solves all of the issues above. As mentioned, Node.js is available for all users on Workbench. Additionally, secure credentials can be permissioned to users that need them, which is safer and less work for everyone.\nSince the functions are written in R, there is already built-in customization by tweaking parameters as needed. Similarly, an R user is much better equipped to maintain an R package, than needing to maintain a Node.js custom query that is ingested by an R package."
  },
  {
    "objectID": "posts/jdenticon/index.html#how",
    "href": "posts/jdenticon/index.html#how",
    "title": "Jdenticon for R is on CRAN",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nmtcars\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"
  }
]