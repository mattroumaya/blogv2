{
  "hash": "60919f982203cc216664c6902299e14d",
  "result": {
    "markdown": "---\ntitle: \"52 Different Ways to Rename a Column in R\"\nauthor: \"Matt Roumaya\"\ndate: \"2021-02-15\"\ncategories: [R, survey, SurveyMonkey]\n---\n\n\n\n\nI haven't posted for a while, and came across [a tweet from Angie Jones](https://twitter.com/techgirl1908/status/1361026673290797060?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1361026673290797060%7Ctwgr%5E8369a4da217c5eccd78952e3b9d0e5248ce02485%7Ctwcon%5Es1_&ref_url=https%3A%2F%2Fmattroumaya.com%2Fpost%2F52-different-ways-to-rename-a-column-in-r%2F) that I really related to.\n\nNot that my previous posts were intellectual thinkpieces, but I thought that I had to write about something novel or innovative to provide any level of value.\n\nWhen I first starting using `R`, my code was a mash-up of `base R`, `dplyr`, and `data.table`. I would reference a column by index and then by name. It was hard for me to follow, and I cringe at the idea that I sent some of this old code to colleagues.\n\nI was trying to think of how many ways there are to do simple data cleaning tasks in `R`, and thought it would be fun to explore.\n\nThe only task accomplished in the rest of this post will be renaming a column, and some pics of my cats.\n\n-   Original column name: `old_column`\n-   Renamed column name: `new_column`\n\nEvery example will include a `data.frame` that is called `df` and will contain one column named `old_column` that we will rename as `new_column`:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"euyeiewofp\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#euyeiewofp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#euyeiewofp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#euyeiewofp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#euyeiewofp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#euyeiewofp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#euyeiewofp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#euyeiewofp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#euyeiewofp .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#euyeiewofp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#euyeiewofp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#euyeiewofp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#euyeiewofp .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#euyeiewofp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#euyeiewofp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#euyeiewofp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#euyeiewofp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#euyeiewofp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#euyeiewofp .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#euyeiewofp .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#euyeiewofp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#euyeiewofp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#euyeiewofp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#euyeiewofp .gt_left {\n  text-align: left;\n}\n\n#euyeiewofp .gt_center {\n  text-align: center;\n}\n\n#euyeiewofp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#euyeiewofp .gt_font_normal {\n  font-weight: normal;\n}\n\n#euyeiewofp .gt_font_bold {\n  font-weight: bold;\n}\n\n#euyeiewofp .gt_font_italic {\n  font-style: italic;\n}\n\n#euyeiewofp .gt_super {\n  font-size: 65%;\n}\n\n#euyeiewofp .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#euyeiewofp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#euyeiewofp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#euyeiewofp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#euyeiewofp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#euyeiewofp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#euyeiewofp .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\">old_column</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_left\">Here</td></tr>\n    <tr><td class=\"gt_row gt_left\">is</td></tr>\n    <tr><td class=\"gt_row gt_left\">a</td></tr>\n    <tr><td class=\"gt_row gt_left\">column</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n# Using `Base R`\n\nThe following examples will only use `base R`, meaning no additional packages will be required to run this code.\n\n1.  Call `colnames` on `df` and index the first column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[1] <- \"new_column\"\n```\n:::\n\n\n2.  Call `names` on `df` and index the first column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[1] <- \"new_column\"\n```\n:::\n\n\n3.  Call `colnames` on `df` and subset the first column also using `colnames`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[colnames(df) == \"old_column\"] <- \"new_column\"\n```\n:::\n\n\n4.  Call `names` on `df` and subset the first column also using `names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[names(df) == \"old_column\"] <- \"new_column\"\n```\n:::\n\n\n5.  Call `colnames` on `df` and subset the first column using `names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[names(df) == \"old_column\"] <- \"new_column\"\n```\n:::\n\n\n6.  Call `names` on `df` and subset the first column using `colnames`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[colnames(df) == \"old_column\"] <- 'new_column'\n```\n:::\n\n\n7.  Call `colnames` on `df` and subset using logical indexing `which`. This returns the index of the column that is equal to \"old_column\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[which(colnames(df) == \"old_column\")] <- \"new_column\"\n```\n:::\n\n\n8.  Since `df` only has one column, we can also call `names` on `df`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- \"new_column\"\n```\n:::\n\n\n9.  ...or `colnames` on `df`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- \"new_column\"\n```\n:::\n\n\n10. We can also use a different, and less efficient approach. Instead of renaming the column value, we can create a new column that is identical to `old_column` and name it `new_column`. Then we can remove `old_column` from our `df`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new column called \"new_column\" that is an exact copy of \"old_column\"\ndf$new_column <- df$old_column\n\n# Remove \"old_column\"\ndf$old_column <- NULL\n```\n:::\n\n\n11. Getting a bit more abstract, we can use `colnames` with `grepl` to use `regex` pattern matching:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[grepl(\"old\", colnames(df))] <- \"new_column\"\n```\n:::\n\n\n12. ...we can also use `names` with #11:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[grepl(\"old\", names(df))] <- \"new_column\"\n```\n:::\n\n\n13. We can swap the first `names` with `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[grepl(\"old\", names(df))] <- \"new_column\"\n```\n:::\n\n\n14. Flip it and reverse it...\n\n![](missyelliot.jpg){width=\"600px\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[grepl(\"old\", colnames(df))] <- \"new_column\"\n```\n:::\n\n\n15. Using `grep` + `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[grep(\"old\", names(df))] <- \"new_column\"\n```\n:::\n\n\n16. Using `grep` + `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[grep(\"old\", colnames(df))] <- \"new_column\"\n```\n:::\n\n\n17. Using `grep` + `names` then `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df)[grep(\"old\", colnames(df))] <- \"new_column\"\n```\n:::\n\n\n18. Using `grep` + `colnames` then `names`:\n\n-   (I am intentionally stopping myself from more Missy Elliott references.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)[grep(\"old\", names(df))] <- \"new_column\"\n```\n:::\n\n\n19. Using `sub` + `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- sub(\"old_column\", \"new_column\", colnames(df))\n```\n:::\n\n\n20. Using `sub` + `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- sub(\"old_column\", \"new_column\", names(df))\n```\n:::\n\n\n21. Using `sub` + `names` then `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- sub(\"old_column\", \"new_column\", colnames(df))\n```\n:::\n\n\n22. Using `sub` + `colnames` then `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- sub(\"old_column\", \"new_column\", names(df))\n```\n:::\n\n\n23. Using `gsub` + `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- gsub(\"old_column\", \"new_column\", colnames(df))\n```\n:::\n\n\n24. Using `gsub` + `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- gsub(\"old_column\", \"new_column\", names(df))\n```\n:::\n\n\n25. Using `gsub` + `names` then `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- gsub(\"old_column\", \"new_column\", colnames(df))\n```\n:::\n\n\n26. Using `gsub` + `colnames` then `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- gsub(\"old_column\", \"new_column\", names(df))\n```\n:::\n\n\n27. Using a `for loop` with `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in paste0(\"new_column\")){\n  colnames(df) <- i\n}\n```\n:::\n\n\n28. Using a `for loop` with `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in paste0(\"new_column\")){\n  names(df) <- i\n}\n```\n:::\n\n\n29. Using `setNames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- setNames(df, \"new_column\")\n```\n:::\n\n\n30. Using `eval` and `parse` with `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neval(parse(text = 'names(df) <- \"new_column\"'))\n```\n:::\n\n\n31. Using `eval` and `parse` with `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\neval(parse(text = 'colnames(df) <- \"new_column\"'))\n```\n:::\n\n\n32. Using `setNames` and `replace`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetNames(df, replace(names(df), names(df) == 'old_column', 'new_column'))\n```\n:::\n\n\n33. Using `transform`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- transform(df, new_column = old_column, old_column = NULL)\n```\n:::\n\n\n# tidyverse\n\nYou can learn more about the `tidyverse` [here](https://www.tidyverse.org/)\n\n34. Using `rename` without a `%>%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- rename(df, \"new_column\" = \"old_column\")\n```\n:::\n\n\n35. Using `rename` with a `%>%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  rename(\"new_column\" = \"old_column\")\n```\n:::\n\n\n36. Renaming in a `select` call without a `%>%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- select(df, \"new_column\" = \"old_column\")\n```\n:::\n\n\n37. Renaming in a `select` call with a `%>%`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  select(\"new_column\" = \"old_column\")\n```\n:::\n\n\n38. Using `mutate` to create a new column and then removing the `old_column`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(new_column = old_column) %>% \n  select(-old_column)\n```\n:::\n\n\n39. Using `mutate` to create a new column and then removing the `old_column` without pipes (`%>%`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- mutate(df, new_column = old_column)\ndf$old_column <- NULL\n```\n:::\n\n\n40. Using `purrr` + `setnames` and `str_replace_*`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n    set_names(~(.) %>%\n                  str_replace_all(\"old_column\", \"new_column\"))\n```\n:::\n\n\n41. Using a character vector and `rename`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename_vec <- c(\"new_column\" = \"old_column\")\n\ndf <- df %>% \n  rename(rename_vec)\n```\n:::\n\n\n42. Using `str_replace` + `names`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- str_replace(names(df), \"old_column\", \"new_column\")\n```\n:::\n\n\n43. Using `str_replace` + `colnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- str_replace(colnames(df), \"old_column\", \"new_column\")\n```\n:::\n\n\n44. Using `starts_with`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  select(\"new_column\" = starts_with(\"old\"))\n```\n:::\n\n\n45. Using `ends_with`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  select(\"new_column\" = ends_with(\"column\"))\n```\n:::\n\n\n46. Using `rename_with` + `gsub`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  rename_with(~gsub(\"old_\", \"new_\", .x))\n```\n:::\n\n\n47. Using `rename_with` + `sub`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  rename_with(~sub(\"old_\", \"new_\", .x))\n```\n:::\n\n\n48. Using `rename_with` and `str_replace`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n     rename_with(~str_replace(\"new_column\", \"old_column\", .x))\n```\n:::\n\n\n49. `Rename` with an index:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n     rename(\"new_column\" = 1)\n```\n:::\n\n\n**A note**: I'm going to stop interchanging `names` and `colnames` as I did previously. I didn't have any idea how many ways there would be to rename columns when I started this, but it's becoming evident that there are likely hundreds of ways if we count every nuance.\n\nI'm also throwing in the towel on the deprecated/superseded `rename_at` / `rename_if` / `rename_all` functions, since they have been replaced by `select` and `rename_with`.\n\n# data.table\n\n`data.table` is really fast, and you can... do cool stuff with it. I am a `data.table` n00b. You can learn more about `data.table` [here](https://github.com/Rdatatable/data.table).\n\n50. Using `data.table::setnames`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.table(df, keep.rownames = FALSE)\nsetnames(df, \"old_column\", \"new_column\")\n```\n:::\n\n\n51. Using `data.table::setnames` with an index:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.table(df, keep.rownames = FALSE)\nsetnames(df, 1, \"new_column\")\n```\n:::\n\n\n52. Refactoring the previous `data.table` example (I have no idea what I'm doing 😅)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.table(df)[, .(new_column = old_column)]\n```\n:::\n\n\n# What's in a (re)name?\n\n`R` is an amazing language and there are endless things you can do. Coming from SPSS, I was previously familiar with `rename` and just left it at that. I had some grand ideas of microbenchmarking each of these methods to find the fastest renaming solution, and maybe that will happen someday if I get an espresso machine or something. ☕\n\nOur team at work will be transitioning from SPSS to R, and this has given me a lot to think about, specifically about the importance of having standardized code, but also having some built-in flexibility for each person's coding style. I'm looking forward to another version of this post, where I focus on a task that is slightly more complicated. Maybe iterating through a `data.frame` column/rowwise?\n\nI also acknowledge my severe lack of `data.table` knowledge. I don't work with big data, and am not in a position to need to make production-level code performant. `tidyverse` code is way more intuitive for me, and the community is really supportive and engaged, so I will likely leave `data.table` off the ...table for a while.\n\n... I'll see myself out.\n\n# Cats\n\n![Mango](IMG-4026.JPG)\n\n![Phil](IMG-4664.JPG)\n\n# References\n\n-   <https://stackoverflow.com/questions/7531868/how-to-rename-a-single-column-in-a-data-frame>\n-   <https://stackoverflow.com/questions/35084427/how-to-change-column-names-in-dataframe-in-the-loop>\n-   <https://stackoverflow.com/questions/50687741/how-to-rename-column-headers-in-r>\n-   <https://stackoverflow.com/questions/46616591/rename-multiple-dataframe-columns-using-purrr>\n-   <https://stackoverflow.com/questions/20987295/rename-multiple-columns-by-names>\n-   <https://stackoverflow.com/questions/9283171/rename-multiple-dataframe-columns-referenced-by-current-names/9292258>\n-   <https://stackoverflow.com/questions/53168572/how-to-rename-specific-variable-of-a-data-frame-with-setnames>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}